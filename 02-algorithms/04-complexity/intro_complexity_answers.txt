1. Describe an analogy for relating an algorithm that has efficiency O(1) and another algorithm that has O(2^n). 
    An example would be: An algorithm that has O(1) is a Cheetah and an algorithm that has O(2^n) is a Snail.
    
    * An algorithm that has O(1) is a 100m dash and an algorithm that has O(2^n) is a Marathon

2. In plain English, what is the best case scenario for binary search?

    * The middle item is the item that you're searching for. (first item)

3. In plain English, what is the worst-case scenario for binary search?

    * Having to split the data in half until there is only 1 piece of data left.

4. In plain English, what is the bounded-case scenario for binary search?

    * The worst case divided by 2 (average of the worst and best cases)

5. Create a graph using the data below. Here's a CSV with the values you'll need.

    * https://docs.google.com/spreadsheets/d/1v64pWW9FgnpuZxcOY9xuDp9usPo6dHBHBF4lYlCl1y0/edit#gid=0

6. What is the limit of the function above as n approaches infinity?

    * Infinity

7. What is the Big-O of an algorithm that has the data points above?

    * O(2^n)
    
8. Write a Ruby method that takes a number n. This method must print the worst-case
   number of iterations for linear search to find an item in collections of size one 
   to n. Use it to generate a table of worst-case iterations of collections up to size 10.
   
   * (See bigO.rb)
   
9. Create a graph from the output using Google Sheets or other graphing software. 
   Analyze the graph and denote its Big-O somewhere on the graph.
   
    * https://docs.google.com/spreadsheets/d/1v64pWW9FgnpuZxcOY9xuDp9usPo6dHBHBF4lYlCl1y0/edit#gid=0

10. What is the Big-O of binary search?

    * log(n)
    
11. What is the Big-Ω of binary search?

    * 1

12. What is the Big-Ө of binary search?

    * log(n) - n
    